package ${packageName}.controller;

import java.util.List;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import com.kunyuesoft.api.annotation.Log;
import com.kunyuesoft.common.base.ResultVO;
import com.kunyuesoft.common.enums.BusinessType;
import com.kunyuesoft.common.utils.ResultVOUtil;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import ${packageName}.model.domain.${ClassName};
import ${packageName}.service.${ClassName}Service;

import javax.annotation.Resource;
#if($table.crud)

#elseif($table.tree)
#end

/**
 * ${functionName}Controller
 * 
 * @author ${author}
 * @date ${datetime}
 */
@Api(value = "${functionName}表接口", tags = "${functionName}表模块")
@RestController
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller extends BaseController
{
    @Resource
    private ${ClassName}Service ${className}Service;

    /**
    * 查询${functionName}列表
    *
    *
    * @param ${className} ${ClassName}Domain
    * @return ResultVO 返回统一结果model
    */
    @ApiOperation(value = "查询${functionName}表", notes = "查询${functionName}表", response = ResultVO.class)
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:list')")
    @GetMapping("/list")
#if($table.crud)
    public ResultVO list(${ClassName} ${className})
    {
        startPage();
        List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
        return getDataTable(list);
    }
#elseif($table.tree)
    public ResultVO list(${ClassName} ${className})
    {
        List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
        return ResultVOUtil.success(list);
    }
#end

    /**
     * 获取${functionName}详细信息
     *
     *
     * @param ${pkColumn.javaField} ${ClassName}Id
     * @return ResultVO 返回统一结果model
     */
    @ApiOperation(value = "获取${functionName}表", notes = "获取${functionName}表", response = ResultVO.class)
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:query')")
    @GetMapping(value = "/{${pkColumn.javaField}}")
    public ResultVO getInfo(@PathVariable("${pkColumn.javaField}") int ${pkColumn.javaField})
    {
        return ResultVOUtil.success(${className}Service.select${ClassName}ById(${pkColumn.javaField}));
    }

    /**
     * 新增${functionName}
     *
     *
     * @param ${className} ${ClassName}Domain
     * @return ResultVO 返回统一结果model
     */
    @ApiOperation(value = "新增${functionName}表", notes = "新增${functionName}表", response = ResultVO.class)
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:add')")
    @Log(title = "${functionName}", businessType = BusinessType.INSERT)
    @PostMapping
    public ResultVO add(@RequestBody ${ClassName} ${className})
    {
        return ResultVOUtil.success(${className}Service.insert${ClassName}(${className}));
    }

    /**
     * 修改${functionName}
     *
     *
     * @param ${className} ${ClassName}Domain
     * @return ResultVO 返回统一结果model
     */
    @ApiOperation(value = "修改${functionName}表", notes = "修改${functionName}表", response = ResultVO.class)
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:edit')")
    @Log(title = "${functionName}", businessType = BusinessType.UPDATE)
    @PutMapping
    public ResultVO edit(@RequestBody ${ClassName} ${className})
    {
        return ResultVOUtil.success(${className}Service.update${ClassName}(${className}));
    }

    /**
     * 删除${functionName}
     *
     *
     * @param ${pkColumn.javaField}s ${ClassName}Ids
     * @return ResultVO 返回统一结果model
     */
    @ApiOperation(value = "修改${functionName}表", notes = "修改${functionName}表", response = ResultVO.class)
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:remove')")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
	@DeleteMapping("/{${pkColumn.javaField}s}")
    public ResultVO remove(@PathVariable int[] ${pkColumn.javaField}s)
    {
        return ResultVOUtil.success(${className}Service.delete${ClassName}ByIds(${pkColumn.javaField}s));
    }
}
